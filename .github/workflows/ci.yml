name: ci

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  commit-policy:
    name: "üìù GRADE: Git Commit History & Messages"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine commit range
        id: range
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "range=${{ github.event.pull_request.base.sha }}..${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              echo "range=${{ github.event.before }}..${{ github.sha }}" >> $GITHUB_OUTPUT
            else
              # First push on a branch: compare from root
              ROOT=$(git rev-list --max-parents=0 HEAD | tail -n 1)
              echo "range=${ROOT}..HEAD" >> $GITHUB_OUTPUT
            fi
          fi
          echo "Range: $(cat $GITHUB_OUTPUT)"

      - name: "‚úÖ GRADE: Commit messages & count (min 8 commits with chore|feature|fix prefixes)"
        env:
          RANGE: ${{ steps.range.outputs.range }}
          MIN_COMMITS: "8"   # change if you want a different minimum
        run: |
          set -e
          echo "üîç Validating commits in range: $RANGE"
          BAD=0

          COMMITS=$(git rev-list --no-merges "$RANGE" || true)
          if [ -z "$COMMITS" ]; then
            echo "::error::‚ùå No commits found to validate."
            exit 1
          fi

          COUNT=$(echo "$COMMITS" | wc -l | tr -d ' ')
          echo "üìä Found $COUNT commits (minimum required: $MIN_COMMITS)"
          
          if [ "$COUNT" -lt "$MIN_COMMITS" ]; then
            echo "::error::‚ùå GRADE FAIL: Found $COUNT commits; require at least $MIN_COMMITS atomic commits."
            BAD=1
          else
            echo "‚úÖ GRADE PASS: Commit count requirement met ($COUNT >= $MIN_COMMITS)"
          fi

          echo ""
          echo "üîç Checking commit message format..."
          for c in $COMMITS; do
            MSG=$(git log -1 --pretty=%s "$c")
            if ! echo "$MSG" | grep -Eiq '^(chore|feature|fix): '; then
              echo "::error::‚ùå GRADE FAIL: Commit $c message must start with 'chore: ', 'feature: ', or 'fix: ' ‚Äî got: $MSG"
              BAD=1
            else
              echo "‚úÖ Valid: $MSG"
            fi
          done

          if [ $BAD -eq 0 ]; then
            echo ""
            echo "‚úÖ GRADE PASS: All commit messages follow conventional format!"
          fi

          exit $BAD

  build-test:
    name: "üß™ GRADE: Code Quality & Testing"
    runs-on: ubuntu-latest
    needs: commit-policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "‚úÖ GRADE: Project structure verification"
        run: |
          echo "üîç Checking required project structure..."
          MISSING=0
          
          if [ -f README.md ]; then
            echo "‚úÖ README.md found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing README.md"
            MISSING=1
          fi
          
          if [ -f requirements.txt ]; then
            echo "‚úÖ requirements.txt found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing requirements.txt"
            MISSING=1
          fi
          
          if [ -d src ]; then
            echo "‚úÖ src/ directory found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing src/ directory"
            MISSING=1
          fi
          
          if [ -d tests ]; then
            echo "‚úÖ tests/ directory found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing tests/ directory"
            MISSING=1
          fi
          
          if [ $MISSING -eq 0 ]; then
            echo "‚úÖ GRADE PASS: All required structure elements present!"
          fi
          
          exit $MISSING

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          # Ensure critical tools present even if students forget them:
          pip install pytest pytest-cov pytest-pylint coverage pylint

      - name: "‚úÖ GRADE: Lint check (pylint --errors-only)"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Running pylint on source code..."
          pylint --errors-only src
          echo "‚úÖ No linting errors found!"

      - name: "‚úÖ GRADE: Pytest-pylint integration test"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Running pytest with pylint integration..."
          pytest --pylint src -v
          echo "‚úÖ Pytest-pylint integration passed!"

      - name: "‚úÖ GRADE: Unit tests execution"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Running unit tests..."
          pytest tests -v
          echo "‚úÖ All unit tests passed!"

      - name: "‚úÖ GRADE: Test coverage (must be 100%)"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Checking test coverage..."
          coverage run -m pytest tests
          coverage report --fail-under=100
          echo "‚úÖ 100% test coverage achieved!"

      - name: "üìä GRADE: Coverage report summary"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üìä Final coverage report:"
          coverage report